#include <iostream>
#include <vector>
#include <fstream>
#include <cstdlib>
#include <sstream>

using namespace std;

int main(int argc, char* argv[])
{
    if (argc != 4) {
        cerr << "Usage: " << argv[0] << " <arg1:SAToutputfile> <arg2:graphfile> <arg3:mappingfile>" << endl;
        return 1;
    }
    string graph_file = argv[1];
    string SAT_outputfile = argv[2];
    string mapping_file = argv[3];

    // read graph file to get vertices, edges, k1, k2
    fstream graph_ipfile;
    int v;
    int e;
    int k1;
    int k2;
    graph_ipfile.open(graph_file, ios::in);
    graph_ipfile >> v;
    graph_ipfile >> e;
    graph_ipfile >> k1;
    graph_ipfile >> k2;
    graph_ipfile.close();

    // read SAT output file generated by miniSAT
    fstream ipfile;
    string sat;
    int var, x;
    stringstream G1;
    stringstream G2;
    ipfile.open(SAT_outputfile, ios::in);
    if (!ipfile) {
        cout << "No such file\n";
        exit( 0 );
    } else {
        ipfile >> sat;
        x = 0;
        if (sat=="SAT"){
            while (ipfile >> var && var!=0) {
                cout << "var : " <<var << endl;
                if (x<v){
                    if (var > 0){
                        cout << "var: "<< var << endl;
                        cout << G1.str() <<endl;
                        G1 << var << " ";
                    }
                } else {
                    if (var > 0){
                        G2 << var-v << " ";
                    }
                }
                x+=1;
            }
        }
        ipfile.close();
    }
    G1 << " \n";
    G2 << " \n";
    cout << "G1: " << G1.str() << endl;
    cout << "G2: " << G2.str() << endl;

    // write in mapping file
    ofstream mappingFile(mapping_file);
    if (!mappingFile.is_open()) {
        cerr << "Failed to open the file for writing." << endl;
        exit(0);
    }
    mappingFile << "#1 \n";
    mappingFile << G1.str();
    mappingFile << "#2 \n";
    mappingFile << G2.str();
    mappingFile.close();

    return 0;
}


